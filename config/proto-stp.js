/**
 * Proto-STP (Stand Treatment Program) Definitions.
 * This file DEFINES the STP templates but does not register them immediately.
 * A function `registerProtoSTPs` is provided to be called after all scripts are loaded.
 */
// In config/proto-stp.js

/* global lib */
// ** SAFE MODE VERSION - Replaced complex activities with simpler ones to isolate crash **
var PROTO_STPS = {
  conservation_intensive: {
    U: [100, 120, 140],
    activities: function () {
      return [
        // REPLACED selectiveThinning with a simple fromBelow
        lib.thinning.fromBelow({
          id: 'conservation_thin',
          schedule: { minRel: 0.2, optRel: 0.3, maxRel: 0.4, repeat: true, repeatInterval: 15 },
          thinningShare: 0.15,
          times: 10
        }),
        lib.harvest.targetDBH({
          id: 'conservation_tdbh',
          schedule: { repeat: true, repeatInterval: 10 },
          dbhList: { fasy: 65, rest: 50 }
        })
      ];
    }
  },

  biodiversity_focused: {
    U: [120, 150, 180],
    activities: function () {
      return [
        // REPLACED plenter with a simple targetDBH harvest to simulate selection
        lib.harvest.targetDBH({
            id: 'biodiversity_tdbh',
            schedule: { minRel: 0.2, optRel: 0.3, maxRel: 0.9, repeat: true, repeatInterval: 10 },
            dbhList: { piab: 50, fasy: 65, abal: 55, rest: 60 }
        })
      ];
    }
  },

  intensive_production: {
    U: [70, 80, 90],
    activities: function () {
      return [
        lib.thinning.fromBelow({
          id: 'production_thin',
          schedule: { minRel: 0.25, optRel: 0.35, maxRel: 0.55 },
          thinningShare: 0.3, // Slightly stronger thinning
          interval: 10,
          times: 5
        }),
        lib.harvest.clearcut({
          id: 'production_clearcut',
          schedule: { minRel: 0.9, optRel: 1.0, maxRel: 1.1, force: true }
        }),
        lib.planting.general({
          id: 'production_plant',
          schedule: 1,
          species: 'piab',
          fraction: 0.9
        })
      ];
    }
  },

  rotation_optimization: {
    U: [80, 90, 100],
    activities: function () {
      return [
        // REPLACED shelterwood with a final clearcut. This is the biggest change.
        lib.harvest.clearcut({
          id: 'rotation_clearcut',
          schedule: { minRel: 0.9, optRel: 1.0, maxRel: 1.1, force: true },
        }),
        lib.planting.general({
          id: 'rotation_plant',
          schedule: 1,
          species: 'piab',
          fraction: 0.9
        })
      ];
    }
  },

  traditional_mgmt: {
    U: [90, 110, 130],
    activities: function () {
      return [
        lib.thinning.fromBelow({
          id: 'traditional_thin',
          schedule: { minRel: 0.4, optRel: 0.5, maxRel: 0.7 },
          thinningShare: 0.2,
          interval: 15,
          times: 10
        }),
        lib.harvest.targetDBH({
          id: 'traditional_tdbh',
          schedule: { repeat: true, repeatInterval: 10 },
          dbhList: { piab: 45, fasy: 55, rest: 50 }
        })
      ];
    }
  },

  low_intensity: {
    U: [150, 200, 250],
    activities: function () {
      return [lib.harvest.noManagement()];
    }
  }
};
// In config/proto-stp.js

/**
 * This function should be called AFTER all library scripts are loaded.
 * It iterates through the defined PROTO_STPS and registers them with the fmengine.
 */
function registerProtoSTPs() {
    console.log("--- Registering Proto-STPs with iLand ABE engine ---");
    for (const stpName in PROTO_STPS) {
        if (PROTO_STPS.hasOwnProperty(stpName)) {
            const stpTemplate = PROTO_STPS[stpName];
            try {
                // The activities are generated by calling the function, ensuring they are fresh objects.
                const activities = stpTemplate.activities();
                
                // Construct the program object directly for the engine.
                const program = {};
                activities.forEach((activity, index) => {
                    // Use a unique key for each activity within the program.
                    program[`activity_${index}`] = activity;
                });
                
                // Set the rotation length `U` on the program object itself.
                program.U = stpTemplate.U;

                // Register the fully constructed program with the iLand engine.
                // This is a more direct and stable method.
                if (fmengine.isValidStp(stpName)) {
                    fmengine.updateManagement(program, stpName);
                } else {
                    fmengine.addManagement(program, stpName);
                }

                console.log(`  - Successfully registered STP: ${stpName}`);
            } catch (error) {
                console.error(`  - FAILED to register STP '${stpName}': ${error.message}`);
            }
        }
    }
    console.log("--- Proto-STP Registration Complete ---");
}

// For NodeJS testing compatibility
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PROTO_STPS;
}